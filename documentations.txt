INTRODUCTION:
    Angular is an application design framework and development platform for creating efficient and sophisticated single-page apps.
    Prerequisite:
                1. HTML
                2. CSS
                3. JavaScript
                4. tools such as classes and modules
                5. TypeScript (JavaScript with types for dependency injection and using decorators for metadata)
GETTING STARTED:
    What is Angular: Angular is a development platform that inclues-
                                                                    1. A component based framework for building scalable web applications
                                                                    2. A collection of well integrated libraries that cover a wide variety of features, including routing, forms management, client-server communication and more.
                                                                    3. A suite of developer tools to help you develop, build, test and update your code.
                    With Angular, it gives you advantages-
                                                        1. A platform that can scale from single-developer projects to enterprise-level applications
                                                        2. Angular is designed to make updating as straightforward as possible to take advantage of the latest developments with a minimum of effort.
                                                        3. Angular ecosystem consists of a diverse group of over 1.7 million developers, library authors, and content creators.

    The essentials for Angular applications:
                                            Components:             Components are the building blocks that compose an application. A components includes
                                                                                                                                                        - a TypeScript class with a @Component() decorator,
                                                                                                                                                        - an HTML template,
                                                                                                                                                        - and styles.
                                                                    The @Component() decoratior specifies
                                                                                                        - A CSS selector that defines how the components is used in a template. HTML elements in your template that match this selector become instances of the component.
                                                                                                        - An HTML template that instructs Angular how to render the component.
                                                                                                        - An optional set of CSS styles that define the appearance of the template's HTML elements.
                                            Templates:              Every component has an HTML template that declares how that component renders. You define this template either inline or by file path.
                                                                    Angular extends HTML with additional syntax that lets you insert dynamic values from your component. Angular automatically updates the rendered DOM when your component's state changes. One application of this feature is inserting dynamic text such as double-curly-braces. The use of double curly braces is that they instruct Angular to interpolate the contents within them.
                                                                    Angular also supports property bindings, to help you set values for properties and attributes of HTML elements and pass values to your application's presentation logic such as square-brackets. The use of square brackets is that syntax indicates that you are binding the propery or attribute to a value in the component class.
                                                                    Declare event listeners to listen for and respond to user actions such as keystrokes, mouse movements, clicks, and touches. You declare an event listener by specifying the event name in parentheses.
                                                                    Add additional functionality to your templates through the use of directives. The most popular directives in Angular are *ngIf and *ngFor. User directives to perform a variest of tasks, such as dynamically modifying the DOM structure. And create your own custom directives to create great user experiences.
                                            Dependency injection:   Dependency injection lets you declare the dependencies of your TypeScript classes without taking care of their instantiation. Instead, Angular handles the instantiation for you. This design pattern lets you write more testable and flexible code. Even through understanding dependency injection is not critical to start using Angular
    Angular CLI:    The Angular CLI is the fastest, straight forward, and recomened way to develop Angular applications. The Angular CLI makes a number of tasks trouble-free.
                        ng build: compiles an Angular app into an output directory
                        ng server: Builds and serves your application, rebuilding on file changes
                        ng generate: Generate or modifies files based on a schematic
                        ng test: Runs unit tests on a given project
                        ng e2e: Builds and serves an Angular application, then runs end-to-end tests
    First-party libraries:  You can use the Angular platfort to incorporate one of the many first-party libraries that Angular provides. Some of the libraries available to you include-
                                Angular Router: Advanced client-side navigation and routing based on Angular components. Supports lazy-loading, nested routes, custom path matching, and more.
                                Angular Forms: Uniform system for form participation and validation
                                Angular HttpClient: Robust HTTP client that can power more advanced client-server communication
                                Angular Animations: Rich system for driving animations based on application state.
                                Angular PWA: Tools for building Prograssinve Web Applications (PWAs) including a service worker and Web app manifest.
                                Angular Schematics: Automated scaffolding, refactoring, and update tools that simplify development at large scale.
                            These libraries are only reequired if and when they can help you add functionality to your applications or solve a particular problem
    Try it:
            Getting started with Angular: This tutorial introduces you to the essentials of Angular by walking you through building an e-commerce site with a catalog, shopping cart, and check-out form.
                Prerequisite:   
                                1. HTML
                                2. JavaScript
                                3. TypeScript
                Take a tour of the example application: You build Angular applications with components. Components define areas of responsibility in the UI that let you reuse sets of UI functionality.
                                                        A component consists of thress things-
                                                                                            * A component class that handles data and functionality
                                                                                            * An HTML template that determines the UI
                                                                                            * Conponent-specific styles that define the look and feel
                                                        This guide demonstrates building an application with the following components.
                                                            * <app-root>- the first component to load and the container for the other components
                                                            * <app-top-bar>- the store name and checkout button
                                                            * <app-product-list>- the product list
                                                            * <app-product-alerts>- a component that contains the applications's alerts 
                Create the sample project:  To create the sample project, generate teh ready-made sample project in StackBlitz(https://stackblitz.com/run?file=src/app/app.component.ts). To save your work:
                                                1. Log into StackBlitz
                                                2. Fork the project you generated(https://stackblitz.com/edit/angular-7qmpc5)
                                                3. Save periodically
                                            In StackBlitz, the preview pane on the right shows the starting state of the example application. The preview features two areas:
                                                * a top bar with the store naem, "My Store", and a checkout button
                                                * a header for a product list, "Products"
                Create the product list:    You will update the application to display a list of products. You will use predefined product data from the "products.ts" file and methods from the "product-list.component.ts" file. This section guides you through editing the HTML, also known as the template.
                                                1. In the "product-list" folder, open the template file "product-list.component.html"
                                                2. Add an "*ngFor" structural directive on a <div> with let product of products (with *ngFor, the div repeats for each product in the list; Structural directives shape or reshape the DOM's structure, by adding, removing, and manipulating elements.)
                                                3. Inside the <div>, add an <h3> and {{product.name}}. The {{product.name}} statement is an example of Angular's interpolation syntax. Interpolation {{}} lets you render the property value as text.
                                                4. To make each product name a link to product details, add the <a> element around {{product.name}};
                                                5. Set the title to be the products name by using the property binding [] syntax.
                                                6. Add the product descriptions. On a <p> element, use an *ngIf directive so that Angular only creates the <p> element if the current product haas a description.                                             
                                                7. Add a button so users can share a product. BInd the button's click event to the share() method in "product-list.component.ts". Event binding uses a set of parentheses, (), around the event, as in the (click) event on the <button> element.
                Pass data to a child component: Currently the product list displays the name and description of each product. The "ProductListComponent" also defines a products property that contains imported data for each product from the products array in "products.ts".
                                                The next step is to create a new alert feature that uses product data from the "ProductListComponent"
                                                The alert checks the product's price, and if the price is greater thatn $700, displays a "Notify Me" button that lets users sign up for notifications when the product goes on sale.
                                                This section walks you through creating a child component, ProductAlertsComponent that can receive data from its parent component, ProductListComponent.
                                                    1. Click on the plus sign above the current terminal to create a new terminal to run the command to generate the component
                                                    2. In the new terminal, generate a new component named "product-alerts" by running the following command.
                                                        ng generate component product-alerts
                                                    The generator creates starter files for the three parts of the component:
                                                        * product-alerts.component.ts
                                                        * product-alerts.component.html
                                                        * product-alerts.component.css
                                                    3. Open "product-alerts-component.ts". The @Component() decorator indicates that the following class is a component. @Component() also provides metadata about the component, including its selector, templates, and styles.
                                                        Key features in the @component() are
                                                                                            * The selector, app-product-alerts, identifies the component,. By convention, Angular component selectors begin with the prefix app-, followed by the component name
                                                                                            * The template and style filenames reference the component's HTML and CSS
                                                                                            * The @Component() definition also exports the class, ProductAlertsComponent, which handles functionality for the component.
                                                    4. To set up ProductAlertsComponent to receive product data, first import Input from @angular/core.
                                                        import { Component, OnInit, Input } from '@angular/core';
                                                        import { Product } from '../products';
                                                    5. In the ProductAlertsComponent class definition, define a property named product with an @Input decorator. The @Input() decorator indicates that the property value passes in from the component's parent, ProductListComponent.
                                                        @Input() product!: Product;
                                                    6. Open product-alerts.component.html and replace the placeholder paragraph with a "Notify Me" button that appears if the product price is over $700.
                                                        *ngIf=product && product.price>700
                                                    7. The generator automatically added the ProductAlertsComponent to the AppModule to make it available to other components in the application.
                                                        ProductAlertsComponent in declaration in app.module.ts
                                                    8. To display ProductAlertsComponent as a child of ProductListComponent, add the <app-product-alerts> element to product-list.component.html. Pass the current product as input to the component usingproperty binding
                                                        <app-product-alerts [product]="product"></app-product-alerts>
                                                        The new product alert component takes a product as input from the product list. With that input, it shows or hides the "Notify Me" button, based on the price of the product. The Phone XL price is over $700, so the "Notify Me" button appears on that product.

                Pass data to a parent component:    To make the "Notify Me" button work, the child component needs to notify and pass the data to the parent component. The ProductAlertsComponent needs to emit an event when the user clicks "Notify Me" and the ProductListComponent needs to respont to the event.
                                                        1. In product-alerts.component.ts, import "Output" and "EventEmitter" from "@angular/core"
                                                            import { Component, Input, Output, EventEmitter } from 'angular/core';
                                                            import { Product } from '../products';
                                                        2. In the component class, define a property named "notify" with an "@Output()" decorator and an instance of EventEmitter(). Configuring "ProductAlertsComponent" with an "@Output()" allows the "ProductAlertsComponent" to emit an event when the value of the "notify" property changes.
                                                            @Output() notify=new EventEmitter();
                                                        3. In "product-alerets.component.html", update the "Notify Me" button with an event binding to call the notify.emit() method.
                                                            <button (click)="notify.emit()">Notify Me</button>
                                                        4. Define the behavior that happens when the user clicks the button. The parent, "ProductListComponent" -not the "ProductAlertsComponent"- acts when the child raises the event. In "product-list.component.ts", define an "onNotify()" method, similar to the "share()" method.
                                                        5. Update the ProductListComponent to receive data from the "ProductAlertsComponent".
                                                            In "product-list.component.html", bind <app-product-alerts> to the onNotify() method of the product list component. <app-product-alerts> is what displays the "Notify Me" button.
                                                                <app-product-alerts
                                                                    [product]="product"
                                                                    (notify)="onNotify()">
                                                                </app-product-alerts>
                                                        6. Click the "Noitify Me" button to trigger an alert which reads, "You will be notified when the product goes on sale".
            Adding navigation:
                                Associate a URL path with a component:  The application already uses the Angular "Router" to navigate to the "ProductListComponent". This section shows you how to define a route to show individual product details.
                                                                            1. Generate a new component for product details. In the terminal generate a new "product-details" component by running the following command:
                                                                                ng generate component product-details
                                                                            2. In "app.module.ts", add a route for product detials, with a path of "products/:productId" and "ProductDetailsComponent" for the component.
                                                                            3. Open product-list.component.html
                                                                            4. Modify the product name anchor to include a "routerLink" with the product.id as a parameter.
                                                                                <a [title]="product.name + 'details'"
                                                                                    [routerLink]="['/products', product.id]">
                                                                                    {{product.name}}
                                                                                    </a>
                                                                               The "RouterLink" directive helps you customize the anchor element. In this case, the route, or URL, contains one fixed segment, "/products". The final segment is variable, inserting the id property of the current product. For example, the URL for a product with an id of 1 wourld be similar to
                                                                                https://getting-started-myfork.stackblitz.io/products/1
                                                                            5. Verify that the router works as intended by clicking the product name. The application should display the "ProductDetailsComponent", which currently says "product-details works!"
                                                                               Notice that the URL in the preview window changes. The final segment is products/# where # is the number of the route you clicked.
                                View product details:   The "ProductDetailsComponent" handles the display of each product. THe Angular Router displays components based on the browser's URL and your defined routes.
                                                        In this section, you will use the Angular Router to combile the products data and route information to display the specific details for each product.
                                                            1. In "product-details.component.ts", import "ActivatedRoute" from "@angular/router", and the products array from ../products.
                                                                import { Component, OnInt } from '@angular/core'
                                                                input { ActivatedRoute } from '@angular/router'
                                                                input { Product, products } from '../products';
                                                            2. Define the "product" property
                                                                product: Product| undefined;
                                                            3. Inject "ActivatedRoute" into the "constructor()" b adding private route: ActivatedRoute as an argulment within the constructor's parentheses.
                                                                constructor(private route: ActivatedRoute){}
                                                               "ActivatedRoute" is specific to each component that the Angular Router loads. "ActivatedRoute" contains information about the route and the route's parameters.
                                                                By injecting "ActivatedRoute", you are Configuring the component to use a service. The Managing Data step covers services in more detail.
                                                            4. In the "ngOnInit()" method, extract the "productId" from the route parameters and find the corresponding product in the "products" array.
                                                                ngOnInit(){
                                                                    const routeParams=this.route.snapshot.paramMap;
                                                                    const productIdFromRoute=Number(routeParams.get('productId'));
                                                                    this.product= products.find(product => product.id === productIdFromRoute );
                                                                }
                                                                The route parameters correspond to the path variables you define in the route. To access the route parameters, we use "route.snapshot", which is the "ActivatedRouteSnapshot" that contains information about the active route at that particular moment in time. The URL that matches the route provides the productId. Angular uses the productId to display the details for each unique product.
                                                            5. Update the "ProductDetailsComponent" template to display product details with an "*ngIf". If a product exists, the <div> renders with a name, price, and description.
                                                                The line <h4> {{ product.price | currency }} </h4>, uses the currency pipe to transform "product.price" from a number to a currenct string. A pipe is a way you can transform data in your HTML template. 
                                                                    When users click on a name in the product list, the router navigates them to the distinct URL for the product, shows the "ProductDetialsComponent", and displays the product details.
            Managing Data:  
                            Create the shopping cart service:   In Angular, a service is an instance of a class that you can make available to any part of your application using Angular's dependency injection system.
                                                                Currently, users can view product information, and the application can simulate sharing and notifications about product changes.
                                                                The next step is to build a way for users to add products to a cart. This section walks you through adding a "Buy" button and setting up a cart service to store informatiiion about products in the cart.
                                                                    Define a cart service:
                                                                                            1. In the terminal generate a new cart service by running the following command.
                                                                                                ng generate service cart
                                                                                            2. Import the "Product" interface from "/Products.ts" into "cart.service.ts" file, and in the "CartService" class, define an "items" property to store the array of the current products in the cart.
                                                                                            3. Define methods to add items to the cart, return cart items, and clear the cart items.
                                                                                                * The "addToCart()" method appends a product to an array of "items"
                                                                                                * The "getItems()" method collects the items users add to the cart and returns each item with its associated quantity.
                                                                                                * The "clearCart()" method returns an empty array of items, wich empties the cart.
                                                                    Use the cart service:
                                                                                            1. In "product-details.component.ts", import the cart service.
                                                                                                    import { CartService } from '../cart.service';
                                                                                            2. Inject the cart service by adding it to the "constructor()".
                                                                                                    constructor(private cartService: CartService){}
                                                                                            3. Define the "addToCart()" method, which adds the current product to the cart.
                                                                                                    this.cartService.addToCart(product);
                                                                                                The addToCart() method does the following:
                                                                                                        * Takes the current "product" as an argument.
                                                                                                        * Uses the "CartServie" "addToCart()" method to add the product to the cart.
                                                                                                        * Displays a message that you've added a product to the cart.
                                                                                            4. In "product-details.component.html", add a button with the label "Buy", and bind the "click()" event to the "addToCart()" method. This code updates the product detials template with a "Buy" button that adds the current product to the cart.
                                                                                                <button type="button" (click)="addToCart(product)">Buy</button>
                                                                                            5. Verify that the new "Buy" button appears as expected by refreshing the application and clicking on a product's name to display its details.
                                                                                            6. Click the "Buy" button to add the product to the stored list of items in the cart and display a confirmation message.
                            Create the cart view:
                                                    Set up the cart component:
                                                                                1. Generate a new component named "cart" in the terminal by running the following command
                                                                                    ng generate component cart
                                                                                2. Note that the newly created "CartComponent" is added to the module's declarations in "app.module.ts"
                                                                                3. Still in "app.module.ts", add a route for the component "CartComponent", with a "path" of "cart"
                                                                                    { path: "cart", component: CartComponent }
                                                                                4. Update the Checkout button so that it routes to the "/cart" URL. In "top-bar.component.html", add a "routerLink" directive pointing to "/cart".
                                                                                    <a routerLink="/cart" class="button fancy-button">
                                                                                    <i class="material-icon">shopping_cart</i>
                                                                                    Checkout
                                                                                    </a>
                                                                                5. Verify the new "cartComponent"works as expected by clicking the "Checkout"button. You can see the "cart works!"default text, and the URL has the pattern https://getting-started.stackblitz.io/cart, where getting-started.stackblitz.io may be different for your StackBltz project.
                                                    Display the cart items:
                                                                                1. In "cart.component.ts", import the "CartService" from the "cart.service.ts" file.
                                                                                    import { CartService } from '../cart.service';
                                                                                2. Inject the "CartService" so that the "CartComponent" can use it by adding it to the constructor().
                                                                                    constructor(private cartService: CartService){}
                                                                                3. Define the "items" property to store the products in the cart.
                                                                                    items = this.cartService.getItems();
                                                                                4. Update the cart template with a header, and use a <div> with an *ngFor to display each of the cart items with its name and price. The resulting "CartComponent" template is as follows.
                                                                                    <div class="cart-item" *ngFor="let item of items">
                                                                                    <span>{{ item.name }} </span>
                                                                                    <span> {{ item.price|currency }}</span>
                                                                                    </div>
                                                                                5. Verify that your cart works as expected:
                                                                                    * Click "My Store"
                                                                                    * Click on a product name to display its details
                                                                                    * Click "Buy" to add the product to the cart
                                                                                    * Click "Checkout" to see the cart
                            Retrieve shipping prices:   Servers often return data in the form of a stream. Streams are useful because they make it easy to transform the returned data and make modifications to the way you request that data. Angular "HttpClient" is a built-in way to fetch data from external APIs and privide them to your application as a stream.
                                                        This section shows you how to use "HttpClient" to retrieve shipping prices from an external file.
                                                        The application that StackBlitz generates for this guide comes with predefined shipping data in assets/shipping.josn. Use this data to add shipping prices for items in the cart.
                                                            [
                                                                {
                                                                    "type": "Overnight",
                                                                    "price": 25.99
                                                                },
                                                                {
                                                                    "type": "2-Day",
                                                                    "price": 9.99
                                                                }
                                                            ]

                                                        
                                                        Configure AppModule to use "HttpClient":
                                                            To use Angular's "HttpClient", you must configure your application to use "HttpClientModule".
                                                            Angular's "HttpClientModule" registers the providers your application needs to use the "HttpClient" service throughout your application.
                                                                1. In app.module.ts, import "HttpClientModule" from the "@angular/common/http" package at the top of the file with other imports. As there are a number of other imports, this code snippet omits them for brevity. Be sure to leave the existing imports in place.
                                                                    import { HttpClientModule } from '@angular/common/http';
                                                                2. To register Angular's "HttpClient" provides globally, add "HttpClientModule" to the "AppModule" "@NgModule()" imports array.
                                                        Configure CartService to use "HttpClient":
                                                            1. In "cart.service.ts", import "HttpClient" from the "@angular/common/http" package.
                                                                import { HttpClient } from '@angular/common/http';
                                                            2. Inject "HttpClient" into the "CartService" "constructor()"
                                                                constructor(private http:HttpClient){}
                                                        Configure "CartService" to get shipping prices
                                                            1. In "cart.service.ts", below the "clearCart()" method, define a new "getShippingPrices()" method that uses the "HttpClient" "get()" method.
                                                                getShippingPrices(){
                                                                    return this.http.get<{type:string,price:number}[]>
                                                                    ('/assets/shipping.json');
                                                                    }
                            Create a shipping component:
                                                        1. Generate a cart component named "shipping" in the terminal by running the following command
                                                            ng generate component shipping
                                                        2. In "app.module.ts", add a route for shipping. Specify a "path" of "shipping" and a componnet of "ShippingComponent".
                                                            { path: 'shipping', component: ShippingComponent }
                                                            There's no link to the new shipping component yet, but you can see its template in the preview pane by entering the URL its route specifies. The URL has the pattern: https://angular-ynqttp--4200.local.webcontainer.io/shipping where the angular-ynqttp-4200.local.webcontainer.io part may be different for your StackBlitz project.
                                                        
                                                        Configuring the ShippingComponent to use CartService
                                                            1. In "shipping.component.ts", import "CartService"
                                                                import { CartService } from '../cart.service'
                                                            2. Inject the cart service in the "ShippingComponent" "constructor()"
                                                                constructor(private cartService: CartService){}
                                                            3. Define a "shippingCosts" property that sets the "shippingCosts" property using the "getShippingPrices()" method from the "CartService"
                                                                shippingCosts= this.cartService.getShippingPrices();
                                                            4. Update the "ShippingComponent" template to display the shipping types and prices using the "async" pipe
                                                                <h3>Shipping Prices</h3>
                                                                <div class="shipping-item" *ngFor="let shipping of shippingCosts| asynct">
                                                                <span> {{ shipping.type }}</span>
                                                                <span> {{ shipping.price| currency }} </span>
                                                                </div>
                                                                The "async" pipe returns the latest value from a stream of data and continues to do so for the life of a given component. When Angular destroys that component, the "async" pipe automatically stops. 
                                                            5. Add a link from the "CartComponent" view to the "ShippingComponent" view.
                                                                <p>
                                                                <a routerLink="/shipping">Shippping Prices</a>
                                                                </p>
                                                                <div class="cart-item" *ngFor="let item of items">
                                                                    <span> {{ item.name }}</span>
                                                                    <span> {{ item.price| currency}}</span>
                                                                </div>
                                                            6. Click the "Checkout" button to see the updated cart. Remember that changing the application causes the preview to refresh, which empties the cart
                                                            7. Click on the link to navigate to the shipping prices.
            Using Forms for User Input:
                                        Define the checkout form model:
                                                                        1. Open "cart.component.ts"
                                                                        2. Import the "FormBuilder" service from the "@angular/forms" package. This service provides convenient methods for generating controls
                                                                            import { FormBuilder } from '@angular/forms';
                                                                        3. Inject the "FormBuilder" service in the "CartComponent" "constructor()". The service is part of the "ReactiveFormModule" module, which you've already imported.
                                                                            constructor(
                                                                                private formBuilder: FormBuilder
                                                                            ){}
                                                                        4. To gather the user's name and address, use the "FormBuilder" "group()" method to set the "checkoutForm" property to a form model containing name and address fields.
                                                                            items = this.cartServie.getItems();
                                                                            checkoutForm= this.formBuilder.group({
                                                                                name:'',
                                                                                address:''
                                                                            });
                                                                        5. Define an "onSubmit()" method to process the form. This method allows users to submit their name and address. In addition, this method uses the "clearCart()" method of the "CartService" to reset the form and clear the cart.
                                                                            onSubmit(): void{
                                                                                this.items=this.cartService.clearCart();
                                                                                console.warn('Your order has been submitted',this.checkoutForm.value);
                                                                                this.checkoutForm.reset();
                                                                            }
                                        Create the checkout form:
                                                                    1. At the bottom of "cart.component.html", add an HTML "<form>" element and a "Purchase" button
                                                                    2. Use a "formGroup" property binding to bind "checkoutForm" to the HTML "<form>"
                                                                        <form [formGroup]="checkoutForm">
                                                                        <button class="button" type="submit">Purchase</button>
                                                                        </form>
                                                                    3. On the "form" tag, use an "ngSubmit" event binding to listen for the form submission and call the "onSubmit()" method with "checkoutForm" value.
                                                                        <form [formGroup]="checkoutForm" (ngSubmit)="onSubmit()">
                                                                        </form>
                                                                    4. Add "<input>" fields for "name" and "address", each with a "formCOntrolName" attribute that binds to the "checkoutForm" form controls for "name" and "address" to their "<input>" fields. The complete component is as follows
                                                                        <h3>Cart</h3>
                                                                        <p>
                                                                        <a routerLink="/shipping"> Shipping Prices</a>
                                                                        </p>
                                                                        <div class="cart-tem" *ngFor='let item of items'>
                                                                            <span>{{ item.name}} </span>
                                                                            <span> {{ item.price|currency }}</span>
                                                                        </div>
                                                                        <form [formGroup]="checkoutForm" (ngSubmit)="onSubmit()">
                                                                            <div>
                                                                            <label for="name">
                                                                            Name</label>
                                                                            <input id="name" type="text" formControlName="name">
                                                                            </div>

                                                                            <div>
                                                                            <label for="address">
                                                                            address
                                                                            </label>
                                                                            <input id="address" type="text" formControlName="address">
                                                                            </div>

                                                                            <button class="button" type="submit">Purchase</button>
                                                                            
                                                                        </form>
                                                                        After putting a few items in the cart, users can review their items, enter their name and address, and submit their purchase.
                                                                        To confirm submission, open the console to see an object containing the name and address you submitted.
            Deploying an application:   Deploying your application is the process of compiling, or building, your code and hosting the JavaScript, CSS, and HTML on a web server.
                Prerequisite:
                                * Node.js
                                * The "Angular CLI". From the terminal, install the Angular CLI globally with:
                                        npm install -g @angular/cli
                Running your applicatin locallY:
                                1. Download the source code from your StackBlitz project by clicking the Download Project icon in the left menu, across from Project, to download your project as a zip archive.
                                2. Unzip the archive and change directory to the newly created project. For example:
                                    cd angular-ynqttp
                                3. To download and install npm packages, use the following npm CLI command:
                                    npm install
                                4. Use the following CLI command to run your application locally:
                                    ng server
                                5. To see your application in the browser, go to http://localhost:4200/. If the default port 4200 is not available, you can specify another port with the port flag as in hte following example:
                                    ng serve --port 4201
                                    While serving your application, you can edit your code and see the changes update automatically in the browser. To stop the ng serve command, press Ctrl_c
                BUilding and hosting your application:
                                1. To build you application for production, use the "build" command. By default, this command uses the "production" build configuration.
                                    ng build
                                This command creates a "dist" folder in the application root directory with all the files that a hosting service needs for serving your application.
                                    If the above "ng build" command throws an error about missing packages, append the missing dependencies in your projects's "package.json" file to match the one in the downloaded StackBlitz project.
                                2. Copy the contents of the "dist/my-project-name" folder your web server. Because these files are static, you can host them on any web server capable of serving files; such as "Node.js", "Java", ".NET", or any backend such as "Firebase", "Google Cloud", or "App Engine".
    Setup:
            Setting up the local environment and workspace:
                                Prerequisites:
                                                * JavaScript
                                                * HTML
                                                * CSS
                                    Knowledge of "TypeScript" is helpful, but not required.
                                    To install Angular on your local system, you need the following
                                        * Node.js: Angular requires an active LTS or maintenance LTS version of Node.js
                                        * npm package manager: Angular, the Angluar CLI, and Angular applications depend on "npm packages" for many features and functions. To download and install npm packages, you need an npm package manager. This guide uses the "npm client" command line interface, which is installed with "Node.js" by default. To check that you have the npm client installed, run npm -v in a terminal window.
                                Install the Angular CLI:
                                                    You use the Angular CLI to create projects, generate application and library code, and perform a vaiety of ongoing development tasks such as testing, bundling, and deployment.
                                                    To install the Angular CLI, open terminal window and run the following command:
                                                        npm install -g @angular/cli
                                                    Create a workspace and initial application:
                                                        You develop apps in the ocntext of an Angular workspace. 
                                                        To create a new workspace and initial started app:
                                                            1. Run the CLI command "ng new" and provide the name "my-app", as shown here:
                                                                ng new my-app
                                                            2. The "ng new" command prompts you for informaton about features to include in the initial app. Accept the defaults by pressing the Enter or Return key.
                                                            
                                                        The Angular CLI installs the necessary Angular npm packages and other dependencies. This can take a few minutes.
                                                        The CLI creates a new workspace and a simple Welcome app, ready to run
                                Run the application: 
                                                        The Angular CLI inclutes a server, for you to build and serve your app locally. 
                                                            1. Navigate to the workspace folder, such as "my-app"
                                                            2. Run the following command
                                                                cd my-app
                                                                ng serve --open
                                                                The "ng server" command launches the server, watches your files, and rebuilds the app as you make changes to those files.
                                                                The --open option automatically opens your browser to ""http://localhost:4200/"
                                                                If your installation and setup was successful, you should see a page similar to the following.
Understanding Angular:
                        Overview: To  understand the capabilities of the Angular framework, you need to learn about the following:
                            * Components
                            * Templates
                            * Directives
                            * Dependency injection
                        Components:
                                    Overview: Components are the main building block for Angular applications. Each component consists of:
                                                * An HTML template that declares what renders on the page
                                                * A Typescript class that defines behaviour
                                                * A CSS selector that defines how the component is used in a template
                                                * Optionally, CSS styles applied to the template
                                            Prerequisite: 
                                                1. Install the Angular CLI
                                                2. Create an Angular workspace with initial application. If you don't have a project, create one using "ng new <project-name>", where <project-name> is the name of your Angular application.
                                            Creating a componnent:
                                                Creating a component using the Angular CLI:
                                                    To create a component using the Angular CLI:
                                                        1. From a terminal window, navigate to the directory containing your application.
                                                        2. Run the "ng generate component <component-name>" command, where <component-name> is the name of your new component
                                                            By default, this command creates the following:
                                                                * A folder named after the component
                                                                * A component file, <component-name>.component.ts
                                                                * A template file, <component-name>.component.html
                                                                * A CSS file, <component-name>.component.css
                                                                * A testing specification file, <component-name>.component.spec.ts
                                                            where <component-name> is the name of your component
                                                    Creating a component manually:
                                                        Although the Angular CLI is the best way to create an Angular component, you can also create a component manually. This section describes how to create the core component file within an existing Angular project.
                                                            To create a new component manually: 
                                                                1. Navigate to your Angular project direcotry.
                                                                2. Create a new file, <component-name>.component.ts.
                                                                3. At the top of the file, add the following import statement.
                                                                    import { Component } from '@angular/core';
                                                                4. After the "import" statement, add a "@Component" decorator
                                                                    @Component({})
                                                                5. Choose a "CSS" selector for the compoenent.
                                                                    @Component({
                                                                        selector: 'app-component-overview',
                                                                    })
                                                                6. Define the HTML template that the component uses to display information. In most cases, this template is a separate HTML file.
                                                                    @Component({
                                                                        selector:'app-component-overview',
                                                                        templateUrl: './component-overview.component.html',
                                                                    })
                                                                7. Select the styles for the component's template. In most cases, you define the styles for your component's template in a separate file.
                                                                    @Component({
                                                                        selector: 'app-component-overview',
                                                                        templateUrl: './component-overview.component.html',
                                                                        styleUrls: ['./component-overview.component.css']
                                                                    })
                                                                8. Add a "class" statement that includes the code for the component.
                                                                    export class ComponentOverviewComponent{

                                                                    }
                                                Specifying a component's CSS selector:
                                                                    Every component requires a "CSS" selector. A selector instructs Angular to instantiate this component wherever it finds the corresponding tag in template HITML. FOr example, consider a component "hello-world.component.ts" that defines its selector as "app-hello-world". This selector instructs Angular to instantiate this component any time the tag <app-hello-world> appears in a template.
                                                                    Specify a component's selector by adding a "selector" statement to the "@Component" decorator
                                                                        @Component({
                                                                            selector: 'app-comonent-overview',
                                                                        })
                                                Defining a component's template:
                                                                    A template is a block of HTML that tells Angular how to render the component in your application. Define a template for your component in one of two ways; by referncing an external file, or directly within the component.
                                                                    To define a template as an external file, add a "teplateUrl" property to the "@Component" decorator.
                                                                        @Component({
                                                                            selector: 'app=component-overview',
                                                                            templateUrl: './component-overview.compoenent.html',
                                                                        })
                                                                    To define a template within the component, add a "template" property to the "@Component" decorator that contains the HTML you want to use.
                                                                        @Component({
                                                                            selector: 'app-component-overview',
                                                                            template: '<h1>Hello World!</h1>',
                                                                        })
                                                                    If you want your template to span multiple lines, use backticks ('). For example:
                                                                        @Component({
                                                                            selector: 'app-component-overview',
                                                                            template: `<h1>Hello World!</h1>
                                                                            <p>This template definition spans multiple lines</p>`
                                                                        })
                                                    Declaring a component's style:
                                                                    Declare component styles uses for its template in one of two ways; by referencing an external file, or directly within the component.
                                                                    To declare the styles for a component in a separate file, add a "styleUrls" property to the "@Component" decorator.
                                                                        @Component({
                                                                            selector: 'app-component-overview',
                                                                            templateUrl: './component-overview.component.html',
                                                                            styleUrls: ['./component-overview.component.css']
                                                                        })
                                                                    To declare the styles within the component, add a "styles" property to the "@Component" decorator that contains the styles you want to use.
                                                                        @Component({
                                                                            selector:'app-component-overview',
                                                                            template: '<h1>Hello World!</h1>',
                                                                            styles: ['h1{ font-weight: normal; }']
                                                                        })
                                                                    The "styles" property takes an array of strings that contain the CSS rule declarations.
                                    Component Lifcycle:
                                                        A component instance has a lifecycle that starts when Angular instantiates the component class and renders the componenet view along with its child views. The lifecycle continues with chnage detection, as Angular checks to see when data-bound properties change, and updates both the view and the component instance as needed. The lifecycle ends when Angular destroys the component instance and removed its rendered template from the DOM. Directives have a similar lifecycle, as Angular creates, updates , and destroys instances in the course of execution.
                                                        Your application can use "lifecycle hook methods" to tap into key events in the lifecycle of a component or directive to initialize new instances, initiate change detection when needed, respond to updates during change detection, and clean up before deletion of instances.

                                                        Prerequisites:
                                                                        * TypeScript programming
                                                                        * Angular app-design fundamentals, as described in "Angular Concepts"
                                                        Responding to lifecycle events:
                                                                        Respond to events in the lifecycle of a component or directive by implementing one or more of the livecycle hook interfaces in the Anglar "core" library. The hooks give you the opportunity to act on a component or directive instance at the appropriate moment, as Angular creates, updates, or destroys that instance.
                                                                        Each interface defines the prototype for a single hook method, whose name is the interface name prefixed with "ng". For example, the "OnInit" interface has a hook method named "ngOnInit()". If you implement this method in your component or directive class, Angular calls it shortly after checking the input properties for that component or directive for the first time
                                                                            @Directive({selector:'[appPeekaBoo]'})
                                                                            export class PeekABooDirective implements OnInit{
                                                                                constructor(private logger: LoggerService){}
                                                                                // implement OnInit's `ngOnInit` method
                                                                                ngOnInit(){
                                                                                    this.logIt('OnInit');
                                                                                }
                                                                                logIt(msg: string){
                                                                                    this.logger.log(`#${nextId++} ${msg}`);
                                                                                }
                                                                            }
                                                                        You do not have to implement all of the lifecycle hooks, just the ones you need.
                                                            Lifecycle event sequence:
                                                                                        After your application instantiates a component or directive by calling its constructor, Angular calls the hook methods you have implemented at the appropriate point in the lifecycle of that instance.
                                                                                        Angular executes hook methods in the following sequence. Use them to perform the following kinds of operations.
                                                                                            ngOnChanges():
                                                                                                            Purpose: Respond when Angular sets or resets data-bound input properties. The method receives a "SimpleChanges" object of current and previous property values. Note that this happens very frequently, so any operation you perform here impacts performance significantly.
                                                                                                            Timing: Called before "ngOnInit()" (if the component has bound inputs) and whenever one or more data-bound input properties change. Note that if your component has no inputs or you use it without providing any inputs, the framework will not call "ngOnChanges()".
                                                                                            ngOnInit():
                                                                                                            Purpose: Initialize the directive or component after Angular first displays the data-bound properties and sets the directive or component's input properties.
                                                                                                            Timing: Called once, after the first "ngOnChnages()". "ngOnInit()" is still called even when "ngOnChanges()" is not (which is the case when there are no template-bound inputs).
                                                                                            ngDoCheck():
                                                                                                            Purpose: Detect and act upon changes that Angular can not or will not detect on its own.
                                                                                                            Timing: Called immediately after "ngOnChanges()" on every change detection run, and immediately after "ngOnInti()" on the first run.
                                                                                           ngAfterContentInit():
                                                                                                            Purpose: Respond after Angular projects external content into the component's view, or into the view that a directive is in.
                                                                                                            Timing: Called once after the first "ngDoCheck()"
                                                                                            ngAfterContentChecked():
                                                                                                            Purpose: Respond after Angular checks the content projected into the directive or component
                                                                                                            Timing: Called after "ngAfterContentInti()" and every subsequent "ngDoCheck()"
                                                                                            ngAfterViewChecked():
                                                                                                            Purpose: Respond after Angular checks the component's views and child views, or the view that contains the directive.
                                                                                                            Timing: Called after the "ngAfterViewInit()" and every subsequent "ngAfterContentChecked()".
                                                                                            ngOnDestroy():
                                                                                                            Purpose: Cleanup just before Angular destroys the directive or component. Unsubscribe Observables and detach event handlers to avoid memory leaks.
                                                                                                            Timing: Called immediately before Angular destroys the directive or component.
                                                            Lifecycle example set:
                                                                                    The live example/ download example demonstrates the use of lifecycle hooks through a series of exercises prented as components under the control of the root "AppComponent". In each case a prent compoenent serves as a test rig for a child component that illustrates one or more of the lifecycle hook methods.
                                                                                    The following table lists the exercises with brief descriptions. The sample code is also used to illustrate specific tasks in the following sections.
                                                                                    Peek-a-boo: Demonstrates every "lifecycle hook". Each hook method writes to the on-screen log.
                                                                                    Spy: Shows how to use lifecycle hooks with a custom directive. The "SpyDirective" implements the "ngOnInti()" and "ngOnDestroy()" hooks, and uses them to watch and report when an element goes in or out of the current view.
                                                                                    OnChanges: Demonstrates how Angular calls the "ngOnChanges()" hook every time one of the component input properties changes, and shows how to interpret the "changes" object passed to the hook method.
                                                                                    







                                            


                                                                                                                







